/*
 * cpurunqfunc - Monitor total CPU run queue length and latency (in
 * nanoseconds) for executions of function {{fname}} of binary {{bname}}.
 *
 * Positional parameters:
 *  $1: Monitoring interval in milliseconds.
 *
 * Copyright (C) 2022 Georgia Tech Center for Experimental Research in Computer
 * Systems
 *
 * Author: Rodrigo Alves Lima
 *
 * Based on runqlen.bt and runqlat.bt from the official bpftrace repository.
 *  Copyright 2018 Netflix, Inc.
 *  Licensed under the Apache License, Version 2.0 (the "License")
 */

#ifndef BPFTRACE_HAVE_BTF
#include <linux/sched.h>

// From kernel/sched/sched.h:
struct cfs_rq {
  struct load_weight  load;
  unsigned long       runnable_weight;
  unsigned int        nr_running;
  unsigned int        h_nr_running;       /* SCHED_{NORMAL,BATCH,IDLE} */
  unsigned int        idle_h_nr_running;  /* SCHED_IDLE */
};
#endif

BEGIN {
  @lastprint = nsecs;
  // Print log header.
  printf("%-26s %-9s %-9s %-13s %-13s\n", "TIME", "QLEN_AVG", "QLEN_MAX",
      "QLAT_AVG", "QLAT_MAX");
  // Initialize global stats variables.
  @qlen_max = 0;
  @qlen_sum = 0;
  @qlen_count = 0;
  @qlat_max = 0;
  @qlat_sum = 0;
  @qlat_count = 0;
}

profile:hz:99
/(nsecs - @lastprint) / 1000000 >= $1/ {
  @lastprint = nsecs;
  // Print log row.
  printf("%-26s %-9d %-9d %-13d %-13d\n",
      strftime("%Y-%m-%d-%H:%M:%S.%f", nsecs),
      @qlen_sum / @qlen_count,
      @qlen_max,
      @qlat_sum / @qlat_count,
      @qlat_max);
  // Re-initialize global stats variables.
  @qlen_max = 0;
  @qlen_sum = 0;
  @qlen_count = 0;
  @qlat_max = 0;
  @qlat_sum = 0;
  @qlat_count = 0;
}

uprobe:{{bname}}:"{{fname}}" {
  // Initialize queue length and latency monitoring for this function execution.
  // Later, 1 is subtracted from @qlen[tid] and @qlat[tid].
  @qlen[tid] = 1;
  @qlat[tid] = 1;
}

uretprobe:{{bname}}:"{{fname}}"
/@qlen[tid] && @qlat[tid]/ {
  // Update global queue length stats.
  @qlen[tid] -= 1;
  @qlen_sum += @qlen[tid];
  @qlen_count += 1;
  if (@qlen[tid] > @qlen_max) {
    @qlen_max = @qlen[tid];
  }
  // Update global queue latency stats.
  @qlat[tid] -= 1;
  @qlat_sum += @qlat[tid];
  @qlat_count += 1;
  if (@qlat[tid] > @qlat_max) {
    @qlat_max = @qlat[tid];
  }
  // Finish queue length and latency monitoring for this function execution.
  delete(@qlen[tid]);
  delete(@qlat[tid]);
}

tracepoint:sched:sched_wakeup,
tracepoint:sched:sched_wakeup_new
/@qlat[args->pid]/ {
  // Update enqueue time after waking up.
  @qtime[args->pid] = nsecs;
}

tracepoint:sched:sched_switch {
  if (@qlat[args->prev_pid] && args->prev_state == TASK_RUNNING) {
    // Update enqueue time after preemption.
    @qtime[args->prev_pid] = nsecs;
  }
  if (@qlat[args->next_pid] && @qtime[args->next_pid]) {
    // Update queue latency.
    @qlat[args->next_pid] += (nsecs - @qtime[args->next_pid]);
    delete(@qtime[args->next_pid]);
  }
}

kprobe:enqueue_task_fair {
  $p = (struct task_struct *) arg1;
  if (@qlen[$p->pid]) {
    // Update queue length.
    @qlen[$p->pid] += ((struct cfs_rq *) ($p->se.cfs_rq))->nr_running;
  }
}

END {
  // Clear global variables.
  clear(@lastprint);
  clear(@qlen_max);
  clear(@qlen_sum);
  clear(@qlen_count);
  clear(@qlat_max);
  clear(@qlat_sum);
  clear(@qlat_count);
  clear(@qtime);
  clear(@qlen);
  clear(@qlat);
}